vim9script
#  ██▒   █▓ ██▓ ███▄ ▄███▓ ██▀███   ▄████▄
# ▓██░   █▒▓██▒▓██▒▀█▀ ██▒▓██ ▒ ██▒▒██▀ ▀█
#  ▓██  █▒░▒██▒▓██    ▓██░▓██ ░▄█ ▒▒▓█    ▄
#   ▒██ █░░░██░▒██    ▒██ ▒██▀▀█▄  ▒▓▓▄ ▄██▒
#    ▒▀█░  ░██░▒██▒   ░██▒░██▓ ▒██▒▒ ▓███▀ ░
#    ░ ▐░  ░▓  ░ ▒░   ░  ░░ ▒▓ ░▒▓░░ ░▒ ▒  ░
#    ░ ░░   ▒ ░░  ░   ░  ░  ░▒ ░ ▒░  ░  ▒
#      ░░   ▒ ░░      ░     ░░   ░ ░
#       ░   ░         ░      ░     ░ ░
#      ░                           ░

def CheckAndCloneMinpac()
    var home: string = expand('$HOME')
    var minpac_dir: string = home .. '/.vim/pack/minpac/opt/minpac'

    if !isdirectory(minpac_dir)
        system('git clone https://github.com/k-takata/minpac.git ' .. minpac_dir)
        system('curl -fLo ' .. home .. '/.vim/autoload/plugpac.vim --create-dirs https://raw.githubusercontent.com/bennyyip/plugpac.vim/master/plugpac.vim')
    endif
enddef

# Call the function to check and clone minpac if necessary
CheckAndCloneMinpac()

# Pass opts to `minpac#init()`
plugpac#Begin({
  status_open: 'vertical',
  verbose: 2,
})

# minpac
Pack 'k-takata/minpac', {'type': 'opt'}

Pack 'junegunn/vim-easy-align'

Pack 'tpope/vim-commentary'

Pack 'jesseleite/vim-noh'

Pack 'girishji/scope.vim'

Pack 'Eliot00/auto-pairs'

Pack 'rafi/awesome-vim-colorschemes'
Pack 'catppuccin/vim'

# completion engine
Pack 'girishji/vimcomplete'
# lsp client support
# snippets
Pack 'hrsh7th/vim-vsnip'
Pack 'hrsh7th/vim-vsnip-integ'
Pack 'rafamadriz/friendly-snippets'

plugpac#End()

var options = {
    completor: { shuffleEqualPriority: true, postfixHighlight: true, triggerWordLen: 2},
    buffer: { enable: true, priority: 10, urlComplete: true, envComplete: true },
    abbrev: { enable: true, priority: 10 },
    lsp: { enable: true, priority: 10, maxCount: 5, filetypes: ['vimscript', 'python', 'javascript', 'typescript', 'c', 'cpp']},
    omnifunc: { enable: false, priority: 8, filetypes: ['python', 'javascript'] },
    vsnip: { enable: true, priority: 11 },
    vimscript: { enable: true, priority: 11 },
}
autocmd VimEnter * g:VimCompleteOptionsSet(options)

# ---------- GENERAL SETTINGS  ----------
filetype plugin indent on

set clipboard=unnamed,unnamedplus

set ttimeout ttimeoutlen=25

set hidden confirm

set scrolloff=0

set langmenu=en_US.UTF-8
language messages en_US.UTF-8

set nocompatible
set fileformats=unix,mac
set encoding=utf-8
set fileencoding=utf-8
set fileencodings=utf-8
set splitbelow splitright # Sane splitting
set title      # Set title of a window to filename
set noswapfile # Prevent vim from creating .swp files
set nospell spelllang=en_gb,ru_yo

set nowrap breakindent breakindentopt=sbr,list:-1 linebreak nojoinspaces
set list listchars=tab:›\ ,nbsp:␣,trail:·,extends:…,precedes:… showbreak=↪
set fillchars=fold:\ ,vert:│
set sidescroll=1 sidescrolloff=3
set nostartofline
set virtualedit=block # Enable free-range cursor
set display=lastline
set laststatus=2      # Always show status line
set ruler             # Show line and column info in status line
set belloff=all shortmess+=Ic

set colorcolumn=110
set textwidth=110

syntax on
set bg=dark
augroup colorscheme_change | au!
    au ColorScheme habamax hi Comment gui=italic cterm=italic ctermfg=148 guifg=#9DCD00
    # au ColorScheme habamax hi Normal ctermbg=NONE guibg=NONE
    au ColorScheme habamax hi SpellBad cterm=underline ctermbg=124 ctermfg=NONE guibg=#af0000 gui=underline guifg=NONE
    au ColorScheme catppuccin_mocha hi Comment gui=NONE cterm=NONE ctermfg=140 guifg=#9DCD00
    au ColorScheme catppuccin_mocha hi Visual gui=NONE cterm=NONE ctermfg=NONE guifg=#1E1E2E guibg=#EFCCC5
    au ColorScheme catppuccin_mocha hi StatusLine gui=NONE cterm=NONE ctermfg=NONE guifg=#CDD6F4 guibg=#3A3A5A
    au ColorScheme catppuccin_mocha hi SpellBad cterm=underline ctermbg=124 ctermfg=NONE guibg=#af0000 gui=underline guifg=NONE
augroup END

if has("termguicolors")
    set termguicolors
endif

colorscheme catppuccin_mocha
set showmatch  # highlight matching brace

if has("gui_running")
  set guifont=Input\ Mono:h13
  set go-=r
  set go-=l
  set go-=L
endif

set cursorline # Highlight cursor line
set cursorlineopt=number
set nu         # Turn on the line numbers

set hlsearch incsearch ignorecase smartcase

# Centre search results on screen
nnoremap n nzz
nnoremap N Nzz

nnoremap j gj
nnoremap k gk

nnoremap <silent> <C-q> <End>a;<C-c>j
imap <silent> <C-q> <End>;<Down>

imap <silent> <C-a> <C-o>I
imap <silent> <C-e> <C-o>A

imap <silent> <C-k> <up>
imap <silent> <C-j> <down>
imap <silent> <C-h> <left>
imap <silent> <C-l> <right>

set autoindent shiftwidth=4 softtabstop=-1 expandtab

autocmd BufNewFile,BufRead,BufWinEnter,FileType,OptionSet * set formatoptions-=t formatoptions-=l formatoptions-=c formatoptions-=r formatoptions-=o formatoptions-=q
autocmd BufNewFile,BufRead,BufWinEnter,FileType,OptionSet * setlocal formatoptions-=t formatoptions-=l formatoptions-=c formatoptions-=r formatoptions-=o formatoptions-=q

set smartindent # Enable smart-indent
set autoindent  # Auto-indent new lines
set smarttab    # Enable smart-tabs

set autochdir   # Change working directory to open buffer
set autoread    # Automatically read files modified elsewhere

set backspace=indent,eol,start  # Backspace behaviour

set mouse=a  # Enable mouse in vim

set wildmenu wildoptions=pum,fuzzy pumheight=20
set wildignore=*.o,*.obj,*.bak,*.exe,*.swp,tags
set completeopt=menu,popup completepopup=highlight:Pmenu

def CheckUndoDir()
    var home: string = expand('$HOME')
    var undo_dir: string = home .. '/.vimUndoDir'

    if !isdirectory(undo_dir)
        system('mkdir -p ' .. undo_dir)
    endif
enddef

# Call the function to check and clone minpac if necessary
CheckUndoDir()
set undodir=~/.vimUndoDir
set undolevels=1000 # Number of undo levels
set undofile
set viminfo='200,<500,s32
